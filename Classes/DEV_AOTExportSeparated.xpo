Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: DEV_AOTExportSeparated unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #DEV_AOTExportSeparated
    Id 41633
    PROPERTIES
      Name                #DEV_AOTExportSeparated
      Extends             #RunBase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #addDestinationGroupToDialog
        #private void addDestinationGroupToDialog(Dialog _dialog)
        #{
        #    ;
        #
        #    _dialog.addGroup("Destination");
        #    m_DlgFldExportPath = _dialog.addFieldValue(typeid(FilePath),
        #                                               m_ExportPath);
        #}
      ENDSOURCE
      SOURCE #addHistoryGroupToDialog
        #private void addHistoryGroupToDialog(Dialog _dialog)
        #{
        #    int      entryIdx;
        #    FilePath pathOfEntry;
        #    ;
        #
        #    _dialog.addGroup("History");
        #    _dialog.addText("Just enter the appropriate number to refer to a " +
        #                    "history entry");
        #    for (entryIdx = 1; entryIdx <= conlen(m_PathHistory); ++entryIdx)
        #    {
        #        pathOfEntry = conpeek(m_PathHistory, entryIdx);
        #        _dialog.addText(strfmt("[%1] - %2", entryIdx, pathOfEntry));
        #    }
        #}
      ENDSOURCE
      SOURCE #buildXPOFileNameForNode
        #private FileName buildXPOFileNameForNode()
        #{
        #    #File
        #
        #    FilePath treeNodeFilePath;
        #    FileName relativeXPOFileName;
        #    FileName absoluteXPOFileName;
        #    ;
        #
        #    treeNodeFilePath = SysTreeNode::treeNodePath2FilePath(m_CurrentNode.treeNodePath());
        #    relativeXPOFileName = System.IO.Path::ChangeExtension(treeNodeFilePath, #xpo);
        #    absoluteXPOFileName = m_ExportPath + relativeXPOFileName;
        #    return absoluteXPOFileName;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #///     Exports the currently selected AOT nodes and their childs separately
        #///     into XPO files.
        #/// </summary>
        #/// <remarks>
        #///     Copyright (c) 2014 Aaron Kunz
        #///     https://github.com/DAXaholic/AOTExportSeparated
        #/// </remarks>
        #final class DEV_AOTExportSeparated extends RunBase
        #{
        #    FilePath  m_ExportPath;
        #    container m_PathHistory;
        #
        #    StackBase         m_SelectedNodes;
        #    TreeNodeTraverser m_NodeTraverser;
        #    TreeNode          m_CurrentNode;
        #
        #    DialogField m_DlgFldExportPath;
        #
        #    #define.MaxPathHistoryEntries (9)
        #
        #    #define.CurrentVersion (2)
        #    #localmacro.CurrentList
        #        m_ExportPath,
        #        m_PathHistory
        #    #endmacro
        #}
      ENDSOURCE
      SOURCE #createMissingDirectoriesIfNecessary
        #private void createMissingDirectoriesIfNecessary(FileName _fileName)
        #{
        #    FilePath directoryPath;
        #    ;
        #
        #    directoryPath = System.IO.Path::GetDirectoryName(_fileName);
        #    System.IO.Directory::CreateDirectory(directoryPath);
        #}
      ENDSOURCE
      SOURCE #determineSelectedNodes
        #private void determineSelectedNodes()
        #{
        #    LastAotSelection aotSelection;
        #    TreeNode         selectedNode;
        #    ;
        #
        #    aotSelection = new LastAOTSelection();
        #    for (selectedNode = aotSelection.first();
        #         selectedNode != null;
        #         selectedNode = aotSelection.next())
        #    {
        #        m_SelectedNodes.push(selectedNode);
        #    }
        #}
      ENDSOURCE
      SOURCE #dialog
        #protected Dialog dialog(DialogRunbase _dialog, boolean _forceOnClient)
        #{
        #    Dialog dlg;
        #    ;
        #
        #    dlg = super(_dialog, _forceOnClient);
        #    this.addDestinationGroupToDialog(dlg);
        #    this.addHistoryGroupToDialog(dlg);
        #    return dlg;
        #}
      ENDSOURCE
      SOURCE #export
        #private void export()
        #{
        #    ;
        #
        #    this.startTraversingNodes();
        #    while (this.nextNode())
        #    {
        #        if (this.isExportableNode())
        #        {
        #            this.exportNode();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #exportNode
        #private void exportNode()
        #{
        #    FileName xpoFileName;
        #    ;
        #
        #    xpoFileName = this.buildXPOFileNameForNode();
        #    this.createMissingDirectoriesIfNecessary(xpoFileName);
        #    SysTreeNode::newTreeNode(m_CurrentNode).toFile(xpoFileName);
        #}
      ENDSOURCE
      SOURCE #exportPathContainsHistoryReference
        #private boolean exportPathContainsHistoryReference()
        #{
        #    ;
        #
        #    return str2IntOk(m_ExportPath) &&
        #           str2int(m_ExportPath) <= conlen(m_PathHistory);
        #}
      ENDSOURCE
      SOURCE #getFromDialog
        #public boolean getFromDialog()
        #{
        #    boolean ret;
        #    ;
        #
        #    ret = super();
        #    if (ret)
        #    {
        #        m_ExportPath = m_DlgFldExportPath.value();
        #        if (this.exportPathContainsHistoryReference())
        #        {
        #            this.resolveHistoryReferenceInExportPath();
        #        }
        #        this.saveExportPathToHistoryTip();
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isAnyNodeSelected
        #private boolean isAnyNodeSelected()
        #{
        #    ;
        #
        #    return m_SelectedNodes.count() > 0;
        #}
      ENDSOURCE
      SOURCE #isExportableNode
        #private boolean isExportableNode()
        #{
        #    #TreeNodeSysNodeType
        #
        #    #define.BASE_ENUM                (#NT_DBENUMTYPE)
        #    #define.CLASS                    (#NT_CLASS)
        #    #define.CONFIGURATION_KEY        (#NT_CONFIGURATIONKEY)
        #    #define.EDT_CONTAINER            (#NT_DBQUEUETYPE)
        #    #define.EDT_DATE                 (#NT_DBDATETYPE)
        #    #define.EDT_DATE_TIME            (#NT_DBDATETIMETYPE)
        #    #define.EDT_ENUM                 (#NT_DBENUMTYPETYPE)
        #    #define.EDT_GUID                 (#NT_DBGUIDTYPE)
        #    #define.EDT_INT                  (#NT_DBINTTYPE)
        #    #define.EDT_INT64                (#NT_DBINT64TYPE)
        #    #define.EDT_REAL                 (#NT_DBREALTYPE)
        #    #define.EDT_STRING               (#NT_DBSTRINGTYPE)
        #    #define.EDT_TIME                 (#NT_DBTIMETYPE)
        #    #define.FORM                     (#NT_FORM)
        #    #define.JOB                      (#NT_XALCODE)
        #    #define.LICENSE_CODE             (#NT_DBLICENSECODE)
        #    #define.MACRO                    (#NT_MCRCODE)
        #    #define.MAP                      (#NT_DBMAP)
        #    #define.MENU                     (#NT_MENU)
        #    #define.MENU_ITEM                (#NT_FUNCITEM)
        #    #define.PERSPECTIVE              (#NT_PERSPECTIVE)
        #    #define.PROJECT                  (#NT_PROJECT_NODE)
        #    #define.QUERY                    (#NT_QE)
        #    #define.REFERENCE                (#NT_REFERENCE)
        #    #define.REPORT                   (#NT_REPORT)
        #    #define.RESOURCE                 (820)
        #    #define.SECURITY_KEY             (#NT_SECURITYKEY)
        #    #define.SERVICE                  (1321)
        #    #define.TABLE                    (#NT_DBTABLE)
        #    #define.TABLE_COLLECTION         (#NT_DBCOLLECTION)
        #    #define.VIEW                     (#NT_DBVIEW)
        #    #define.WEB_CONTROL              (887)
        #    #define.WEB_MANAGED_CONTENT_ITEM (890)
        #    #define.WEB_PAGE_DEFINITION      (881)
        #    #define.WEB_URL_MENU_ITEM        (864)
        #    ;
        #
        #    switch (m_CurrentNode.sysNodeType())
        #    {
        #        case #BASE_ENUM:
        #        case #CLASS:
        #        case #CONFIGURATION_KEY:
        #        case #EDT_CONTAINER:
        #        case #EDT_DATE:
        #        case #EDT_DATE_TIME:
        #        case #EDT_ENUM:
        #        case #EDT_GUID:
        #        case #EDT_INT64:
        #        case #EDT_INT:
        #        case #EDT_REAL:
        #        case #EDT_STRING:
        #        case #EDT_TIME:
        #        case #FORM:
        #        case #JOB:
        #        case #LICENSE_CODE:
        #        case #MACRO:
        #        case #MAP:
        #        case #MENU_ITEM:
        #        case #PERSPECTIVE:
        #        case #PROJECT:
        #        case #QUERY:
        #        case #REFERENCE:
        #        case #REPORT:
        #        case #RESOURCE:
        #        case #SECURITY_KEY:
        #        case #SERVICE:
        #        case #TABLE:
        #        case #TABLE_COLLECTION:
        #        case #VIEW:
        #        case #WEB_CONTROL:
        #        case #WEB_MANAGED_CONTENT_ITEM:
        #        case #WEB_PAGE_DEFINITION:
        #        case #WEB_URL_MENU_ITEM:
        #            return true;
        #
        #        case #MENU:
        #            return this.isNotSubmenuNode();
        #
        #        default:
        #            return false;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #isNotSubmenuNode
        #private boolean isNotSubmenuNode()
        #{
        #    ;
        #
        #    return xUtilElements::exist(UtilElementType::Menu,
        #                                m_CurrentNode.treeNodeName());
        #}
      ENDSOURCE
      SOURCE #new
        #protected void new()
        #{
        #    ;
        #
        #    super();
        #    m_SelectedNodes = new StackBase();
        #}
      ENDSOURCE
      SOURCE #nextNode
        #private boolean nextNode()
        #{
        #    ;
        #
        #    m_CurrentNode = m_NodeTraverser.next();
        #    if (m_CurrentNode != null)
        #    {
        #        return true;
        #    }
        #
        #    this.startTraversingNextSelectedNode();
        #    if (m_NodeTraverser != null)
        #    {
        #        return this.nextNode();
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #pack
        #public container pack()
        #{
        #    ;
        #
        #    return [#CurrentVersion, #CurrentList];
        #}
      ENDSOURCE
      SOURCE #prependExportPathToHistory
        #private void prependExportPathToHistory()
        #{
        #    ;
        #
        #    m_PathHistory = conins(m_PathHistory, 1, m_ExportPath);
        #}
      ENDSOURCE
      SOURCE #removeExportPathFromHistory
        #private void removeExportPathFromHistory()
        #{
        #    int conIdx;
        #    ;
        #
        #    do
        #    {
        #        conIdx = confind(m_PathHistory, m_ExportPath);
        #        if (conIdx > 0)
        #        {
        #            m_PathHistory = condel(m_PathHistory, conIdx, 1);
        #        }
        #    } while (conIdx > 0);
        #}
      ENDSOURCE
      SOURCE #resolveHistoryReferenceInExportPath
        #private void resolveHistoryReferenceInExportPath()
        #{
        #    int historyIndex;
        #    ;
        #
        #    historyIndex = str2int(m_ExportPath);
        #    m_ExportPath = conpeek(m_PathHistory, historyIndex);
        #}
      ENDSOURCE
      SOURCE #run
        #public void run()
        #{
        #    ;
        #
        #    super();
        #    this.determineSelectedNodes();
        #    if (this.isAnyNodeSelected())
        #    {
        #        this.export();
        #    }
        #}
      ENDSOURCE
      SOURCE #saveExportPathToHistoryTip
        #private void saveExportPathToHistoryTip()
        #{
        #    ;
        #
        #    this.removeExportPathFromHistory();
        #    this.prependExportPathToHistory();
        #    this.trimPathHistory();
        #}
      ENDSOURCE
      SOURCE #startTraversingNextSelectedNode
        #private void startTraversingNextSelectedNode()
        #{
        #    TreeNode nextSelectedNode;
        #    ;
        #
        #    nextSelectedNode = m_SelectedNodes.pop();
        #    if (nextSelectedNode != null)
        #    {
        #        m_NodeTraverser = new TreeNodeTraverser(nextSelectedNode, true);
        #    }
        #    else
        #    {
        #        m_NodeTraverser = null;
        #    }
        #}
      ENDSOURCE
      SOURCE #startTraversingNodes
        #private void startTraversingNodes()
        #{
        #    ;
        #
        #    this.startTraversingNextSelectedNode();
        #}
      ENDSOURCE
      SOURCE #trimPathHistory
        #private void trimPathHistory()
        #{
        #    ;
        #
        #    m_PathHistory = condel(m_PathHistory, #MaxPathHistoryEntries, intmax());
        #}
      ENDSOURCE
      SOURCE #unpack
        #public boolean unpack(container _packedObj)
        #{
        #    Version v;
        #    boolean ret;
        #    ;
        #
        #    v = RunBase::getVersion(_packedObj);
        #    switch (v)
        #    {
        #        case #CurrentVersion:
        #            ret = true;
        #            [v, #CurrentList] = _packedObj;
        #            break;
        #
        #        default:
        #            ret = false;
        #            break;
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static DEV_AOTExportSeparated construct()
        #{
        #    ;
        #
        #    return new DEV_AOTExportSeparated();
        #}
      ENDSOURCE
      SOURCE #description
        #public static ClassDescription description()
        #{
        #    ;
        #
        #    return "Separated AOT Export";
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    DEV_AOTExportSeparated instance;
        #    ;
        #
        #    instance = DEV_AOTExportSeparated::construct();
        #    if (instance.prompt())
        #    {
        #        instance.run();
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: END
